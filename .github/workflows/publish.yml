name: Publish to GitHub Packages

on:
  release:
    types: [created]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@jameshusband'

      - name: Install dependencies
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize Nx Cloud
        run: npx nx connect-to-nx-cloud

      - name: Check for removed packages
        id: check-removed
        run: |
          # Get the previous release tag
          PREV_TAG=$(git tag -l 'v*' | sort -V | grep -v $(git describe --tags --abbrev=0) | tail -n 1)
          
          if [ -n "$PREV_TAG" ]; then
            echo "Checking for removed packages since $PREV_TAG..."
            
            # Get packages that existed in previous tag
            PREV_PACKAGES=$(git ls-tree -r --name-only $PREV_TAG packages/ | grep package.json | xargs -I {} git show $PREV_TAG:{} | jq -r '.name' | sort)
            
            # Get current packages
            CURRENT_PACKAGES=$(find packages -name package.json -exec jq -r '.name' {} \; | sort)
            
            # Find removed packages
            REMOVED_PACKAGES=$(comm -23 <(echo "$PREV_PACKAGES") <(echo "$CURRENT_PACKAGES"))
            
            if [ -n "$REMOVED_PACKAGES" ]; then
              echo "Found removed packages:"
              echo "$REMOVED_PACKAGES"
              # Create a compact JSON array without whitespace
              REMOVED_JSON=$(echo "$REMOVED_PACKAGES" | tr '\n' ',' | sed 's/,$//' | sed 's/^/[/' | sed 's/$/]/')
              echo "removed_packages=$REMOVED_JSON" >> $GITHUB_OUTPUT
            else
              echo "No packages were removed"
              echo "removed_packages=[]" >> $GITHUB_OUTPUT
            fi
          else
            echo "No previous release found"
            echo "removed_packages=[]" >> $GITHUB_OUTPUT
          fi

      - name: Delete removed packages
        if: steps.check-removed.outputs.removed_packages != '[]'
        run: |
          # Convert JSON array to lines
          echo '${{ steps.check-removed.outputs.removed_packages }}' | sed 's/^\[//' | sed 's/\]$//' | tr ',' '\n' | while read package; do
            if [ -n "$package" ]; then
              # Remove quotes from package name
              package=$(echo $package | tr -d '"')
              echo "Deleting package: $package"
              # Extract package name without scope
              PKG_NAME=$(echo $package | sed 's/@jameshusband\///')
              
              # Delete the package using GitHub API
              curl -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/user/packages/npm/$PKG_NAME"
              
              echo "Package $package deleted"
            fi
          done

      - name: Get base commit
        id: base-commit
        run: |
          # Get the previous release tag
          PREV_TAG=$(git tag -l 'v*' | sort -V | grep -v $(git describe --tags --abbrev=0) | tail -n 1)
          if [ -z "$PREV_TAG" ]; then
            # First release - compare with first commit
            BASE=$(git rev-list --max-parents=0 HEAD)
          else
            # Use previous release tag
            BASE=$PREV_TAG
          fi
          echo "base=$BASE" >> $GITHUB_OUTPUT

      - name: Build affected packages
        run: npx nx affected --target=build --base=${{ steps.base-commit.outputs.base }}

      - name: Version and publish affected packages
        run: |
          # Get version from release tag
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          
          # Version and publish only affected packages
          npx nx affected --target=nx-release-publish --base=${{ steps.base-commit.outputs.base }} --ver=$VERSION
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }} 