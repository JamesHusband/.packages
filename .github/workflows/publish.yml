name: Publish to GitHub Packages

on:
  release:
    types: [created]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@jameshusband'

      - name: Install dependencies
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize Nx Cloud
        run: npx nx connect-to-nx-cloud

      - name: Check for removed packages
        id: check-removed
        run: |
          # Get the previous release tag
          PREV_TAG=$(git tag -l 'v*' | sort -V | grep -v $(git describe --tags --abbrev=0) | tail -n 1)
          
          if [ -n "$PREV_TAG" ]; then
            echo "Checking for removed packages since $PREV_TAG..."
            
            # Get packages that existed in previous tag
            PREV_PACKAGES=$(git ls-tree -r --name-only $PREV_TAG packages/ | grep package.json | xargs -I {} git show $PREV_TAG:{} | jq -r '.name' | sort)
            
            # Get current packages
            CURRENT_PACKAGES=$(find packages -name package.json -exec jq -r '.name' {} \; | sort)
            
            # Find removed packages
            REMOVED_PACKAGES=$(comm -23 <(echo "$PREV_PACKAGES") <(echo "$CURRENT_PACKAGES"))
            
            if [ -n "$REMOVED_PACKAGES" ]; then
              echo "Found removed packages:"
              echo "$REMOVED_PACKAGES"
              # Convert newline-separated list to JSON array
              REMOVED_JSON=$(echo "$REMOVED_PACKAGES" | jq -R . | jq -s .)
              echo "removed_packages=$REMOVED_JSON" >> $GITHUB_OUTPUT
            else
              echo "No packages were removed"
            fi
          else
            echo "No previous release found"
          fi

      - name: Unlist removed packages
        if: steps.check-removed.outputs.removed_packages != '[]'
        run: |
          echo '${{ steps.check-removed.outputs.removed_packages }}' | jq -r '.[]' | while read package; do
            if [ -n "$package" ]; then
              echo "Unlisting package: $package"
              # Extract package name without scope
              PKG_NAME=$(echo $package | sed 's/@jameshusband\///')
              
              # Get all versions of the package
              VERSIONS=$(curl -s \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/user/packages/npm/$PKG_NAME/versions" | jq -r '.[].name')
              
              # Unlist each version
              for version in $VERSIONS; do
                echo "Unlisting $package@$version"
                npm unpublish "$package@$version" --force || echo "Failed to unlist $package@$version"
              done
              
              echo "Package $package unlisted"
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Publish
        run: |
          # Get version from release tag
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          
          # Build all packages first
          npx nx run-many --target=build --all
          
          # Publish packages
          npx nx release publish --ver=$VERSION
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }} 